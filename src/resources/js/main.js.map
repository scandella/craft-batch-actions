{"version":3,"file":"js/main.js","mappings":"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","sources":["webpack://craft-block-batch-actions/./client/src/scripts/BlockBatchActionBar.ts","webpack://craft-block-batch-actions/webpack/bootstrap","webpack://craft-block-batch-actions/webpack/runtime/make namespace object","webpack://craft-block-batch-actions/./client/src/scripts/main.ts"],"sourcesContent":["import { InputBlock, MatrixInputBlock, NeoInputBlock } from './types/InputBlock'\nimport { InputField, NeoInputField } from './types/InputField'\n\nabstract class BlockBatchActionBar {\n  public $bar: JQuery\n  public $selectContainer: JQuery\n  public $select: JQuery\n  public $buttonsContainer: JQuery\n  public $menuContainer: JQuery\n  public $menu: JQuery\n  protected addBlockEvent: string\n  private _$buttons: Record<string, JQuery> = {}\n\n  constructor (\n    public readonly input: InputField,\n    protected readonly blockClass: string,\n    protected readonly blockSelectedClass: string\n  ) {\n    this.$bar = $('<div class=\"block-batch-action-bar\"/>').prependTo(input.$container)\n    this._initSelect()\n    this._initButtons()\n    this._initMenu()\n\n    const $actions = this.$bar.add(this.$menu)\n\n    this.supportedActions().forEach(([label, _icon, _check]) => {\n      const lowerCaseLabel = label.toLowerCase()\n      this._$buttons[lowerCaseLabel] = $actions.find(`[data-bba-bn=\"button.${lowerCaseLabel}\"]`)\n      this._$buttons[lowerCaseLabel].on('activate', (e: JQuery.Event) => {\n        e.preventDefault()\n        const actionMethod = this[lowerCaseLabel as keyof BlockBatchActionBar]\n\n        if (typeof actionMethod === 'function') {\n          actionMethod.bind(this)(this.getSelectedBlocks())\n          this._refreshButtons()\n        }\n      })\n    })\n\n    this._refreshButtons()\n  }\n\n  protected supportedActions (): Array<[string, string, Function]> {\n    return [\n      ['Expand', 'expand', this.isBlockCollapsed.bind(this)],\n      ['Collapse', 'collapse', this.isBlockExpanded.bind(this)],\n      ['Enable', 'enabled', this.isBlockDisabled.bind(this)],\n      ['Disable', 'disabled', this.isBlockEnabled.bind(this)],\n      ['Delete', 'remove', (_: JQuery) => true]\n    ]\n  }\n\n  protected abstract isBlockExpanded ($block: JQuery): boolean\n\n  protected isBlockCollapsed ($block: JQuery): boolean {\n    return !this.isBlockExpanded($block)\n  }\n\n  protected abstract isBlockEnabled ($block: JQuery): boolean\n\n  protected isBlockDisabled ($block: JQuery): boolean {\n    return !this.isBlockEnabled($block)\n  }\n\n  private _initSelect (): void {\n    this.$selectContainer = $('<div/>', {\n      class: 'block-batch-action-bar_select',\n      role: 'checkbox',\n      tabindex: 0,\n      'aria-label': 'Select all',\n      'aria-checked': 'false'\n    }).appendTo(this.$bar)\n    this.$select = $('<div class=\"checkbox\">').appendTo(this.$selectContainer)\n    let handlingCheckbox = false\n    let initialised = false\n\n    const selectHandler: (e: JQuery.Event) => void = (e) => {\n      if (!initialised) {\n        // The add block event is only initialised on the first check of the select checkbox, since\n        // if it isn't checked then any new block doesn't need to be checked\n        this.input.on(this.addBlockEvent, (e: any) => {\n          const $block = e.$block ?? e.block.$container\n          $block.toggleClass(this.input.blockSelect.settings.selectedClass, this.$select.hasClass('checked'))\n        })\n        initialised = true\n      }\n\n      handlingCheckbox = true\n      this.$select.toggleClass('checked').removeClass('indeterminate')\n      const selectAll = this.$select.hasClass('checked')\n\n      if (selectAll) {\n        this.input.blockSelect.selectAll()\n        this.$selectContainer.attr('aria-checked', 'true')\n      } else {\n        this.input.blockSelect.deselectAll()\n        this.$selectContainer.attr('aria-checked', 'false')\n      }\n    }\n\n    this.$selectContainer.on('mousedown', (e) => {\n      if (e.which === Garnish.PRIMARY_CLICK) {\n        selectHandler(e)\n      }\n    })\n    this.$selectContainer.on('keydown', (e) => {\n      if (e.keyCode === Garnish.SPACE_KEY) {\n        e.preventDefault()\n        selectHandler(e)\n      }\n    })\n\n    this.input.blockSelect.on('selectionChange', (_: Event) => {\n      if (!handlingCheckbox) {\n        // Any manual change to block selection invalidates the select all state\n        this.$select.removeClass('checked')\n\n        const anyBlocksChecked = this.input.blockSelect.$selectedItems.length > 0\n        this.$select.toggleClass('indeterminate', anyBlocksChecked)\n        this.$selectContainer.attr('aria-checked', anyBlocksChecked ? 'mixed' : 'false')\n      } else {\n        // Set our checkbox handling as being complete\n        handlingCheckbox = false\n      }\n\n      this._refreshButtons()\n    })\n  }\n\n  private _refreshButtons (): void {\n    const actions: Record<string, any> = {}\n    const labels: string[] = []\n\n    this.supportedActions().forEach(([label, icon, check]) => {\n      labels.push(label)\n      actions[label] = {\n        icon,\n        check,\n        enable: false\n      }\n    })\n\n    this.input.blockSelect.$selectedItems.each((_: number, block: HTMLElement) => {\n      const $block = $(block)\n      labels.forEach((label) => {\n        actions[label].enable ||= actions[label].check($block)\n      })\n    })\n\n    labels.forEach((label) => {\n      this._$buttons[label.toLowerCase()].toggleClass('disabled', actions[label].enable === false)\n    })\n  }\n\n  private _initButtons (): void {\n    this.$buttonsContainer = $('<div class=\"btngroup\"/>').appendTo(this.$bar)\n    this.supportedActions()\n      .forEach(([label, icon, _]) => this._generateAction(label, icon, 'btn').appendTo(this.$buttonsContainer))\n  }\n\n  private _initMenu (): void {\n    this.$menuContainer = $('<div class=\"block-batch-action-bar_menu hidden\"/>').appendTo(this.$bar)\n    const $button: any = $('<button type=\"button\" class=\"btn settings icon menubtn\">Actions</button>')\n      .appendTo(this.$menuContainer)\n    this.$menu = $('<div class=\"menu\"/>')\n      .appendTo(this.$menuContainer)\n    const $ul = $('<ul class=\"padded\"/>')\n      .appendTo(this.$menu)\n\n    this.supportedActions()\n      .forEach(([label, icon]) => $('<li/>').append(this._generateAction(label, icon)).appendTo($ul))\n\n    $button.menubtn()\n    let buttonsWidth = this.$buttonsContainer.width() ?? 0\n    this.$bar.on('resize', () => {\n      buttonsWidth ||= this.$buttonsContainer.width() ?? 0\n      const isMobile = (this.$bar.width() ?? 0) < buttonsWidth\n      this.$buttonsContainer.toggleClass('hidden', isMobile)\n      this.$menuContainer.toggleClass('hidden', !isMobile)\n    })\n  }\n\n  private _generateAction (label: string, icon: string|null, buttonClasses?: string): JQuery {\n    const isButton = typeof buttonClasses !== 'undefined'\n    const lowerCaseLabel = label.toLowerCase()\n    icon ??= lowerCaseLabel\n    const $action = $(`<${isButton ? 'button' : 'a'}/>`)\n      .attr({\n        'aria-label': label,\n        'data-bba-bn': `button.${lowerCaseLabel}`,\n        'data-icon': icon\n      })\n      .text(label)\n\n    if (isButton) {\n      $action.addClass(buttonClasses)\n    }\n\n    return $action\n  }\n\n  protected abstract getSelectedBlocks (): InputBlock[]\n\n  public expand (blocks: InputBlock[]): void {\n    blocks.forEach((block) => block.expand())\n  }\n\n  public collapse (blocks: InputBlock[]): void {\n    blocks.forEach((block) => block.collapse())\n  }\n\n  public abstract enable (blocks: InputBlock[]): void\n\n  public abstract disable (blocks: InputBlock[]): void\n\n  public abstract delete (blocks: InputBlock[]): void\n}\n\nclass MatrixBatchActionBar extends BlockBatchActionBar {\n  constructor (public readonly input: InputField) {\n    super(input, 'matrixblock', 'sel')\n    super.addBlockEvent = 'blockAdded'\n  }\n\n  protected isBlockExpanded ($block: JQuery): boolean {\n    return !$block.hasClass('collapsed')\n  }\n\n  protected isBlockEnabled ($block: JQuery): boolean {\n    return !$block.hasClass('disabled')\n  }\n\n  protected getSelectedBlocks (): MatrixInputBlock[] {\n    return this.input.$container\n      .find(`.${this.blockClass}.${this.blockSelectedClass}`)\n      .map((_, blockEl) => $(blockEl).data('block'))\n      .get()\n  }\n\n  public enable (blocks: MatrixInputBlock[]): void {\n    blocks.forEach((block) => block.enable())\n  }\n\n  public disable (blocks: MatrixInputBlock[]): void {\n    blocks.forEach((block) => block.disable())\n  }\n\n  public delete (blocks: MatrixInputBlock[]): void {\n    if (window.confirm('Are you sure you want to delete the selected blocks?')) {\n      blocks.forEach((block) => block.selfDestruct())\n    }\n  }\n}\n\nclass NeoBatchActionBar extends BlockBatchActionBar {\n  constructor (public readonly input: NeoInputField) {\n    super(input, 'ni_block', 'is-selected')\n    super.addBlockEvent = 'addBlock'\n  }\n\n  protected isBlockExpanded ($block: JQuery): boolean {\n    return $block.hasClass('is-expanded')\n  }\n\n  protected isBlockEnabled ($block: JQuery): boolean {\n    return $block.hasClass('is-enabled')\n  }\n\n  protected getSelectedBlocks (): NeoInputBlock[] {\n    return this.input.getBlocks().filter((block) => block.isSelected())\n  }\n\n  public enable (blocks: NeoInputBlock[]): void {\n    blocks.find((block) => !block.isEnabled())?.enable()\n  }\n\n  public disable (blocks: NeoInputBlock[]): void {\n    blocks.find((block) => block.isEnabled())?.disable()\n  }\n\n  public delete (blocks: NeoInputBlock[]): void {\n    if (window.confirm('Are you sure you want to delete the selected blocks?')) {\n      blocks.forEach((block) => this.input.removeBlock(block))\n    }\n  }\n}\n\nexport { MatrixBatchActionBar, NeoBatchActionBar }\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import { MatrixBatchActionBar, NeoBatchActionBar } from './BlockBatchActionBar'\nimport { InputField, NeoInputField } from './types/InputField'\nimport '../styles/main.scss'\n\ninterface MatrixAfterInitEvent {\n  target: InputField\n}\n\ninterface NeoAfterInitEvent {\n  target: NeoInputField\n}\n\nconst actionBars = []\n\nGarnish.on(Craft.MatrixInput, 'afterInit', (e: MatrixAfterInitEvent) => {\n  actionBars.push(new MatrixBatchActionBar(e.target))\n})\n\nif (typeof Neo?.Input !== 'undefined') {\n  Garnish.on(Neo.Input, 'afterInit', (e: NeoAfterInitEvent) => {\n    // Neo's block select was private prior to Neo 3.3.4\n    // TODO: remove this check on Craft 5\n    if (typeof e.target.blockSelect !== 'undefined') {\n      actionBars.push(new NeoBatchActionBar(e.target))\n    }\n  })\n}\n"],"names":["BlockBatchActionBar","constructor","input","blockClass","blockSelectedClass","_$buttons","this","$bar","$","prependTo","$container","_initSelect","_initButtons","_initMenu","$actions","add","$menu","supportedActions","forEach","label","_icon","_check","lowerCaseLabel","toLowerCase","find","on","e","preventDefault","actionMethod","bind","getSelectedBlocks","_refreshButtons","isBlockCollapsed","isBlockExpanded","isBlockDisabled","isBlockEnabled","_","$block","$selectContainer","class","role","tabindex","appendTo","$select","handlingCheckbox","initialised","selectHandler","addBlockEvent","block","toggleClass","blockSelect","settings","selectedClass","hasClass","removeClass","selectAll","attr","deselectAll","which","Garnish","PRIMARY_CLICK","keyCode","SPACE_KEY","anyBlocksChecked","$selectedItems","length","actions","labels","icon","check","push","enable","each","$buttonsContainer","_generateAction","$menuContainer","$button","$ul","append","menubtn","buttonsWidth","width","isMobile","buttonClasses","isButton","$action","text","addClass","expand","blocks","collapse","MatrixBatchActionBar","super","map","blockEl","data","get","disable","delete","window","confirm","selfDestruct","NeoBatchActionBar","getBlocks","filter","isSelected","isEnabled","removeBlock","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","exports","module","__webpack_modules__","r","Symbol","toStringTag","Object","defineProperty","value","actionBars","Craft","MatrixInput","target","Neo","Input"],"sourceRoot":""}