{"version":3,"file":"js/main.js","mappings":"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","sources":["webpack://craft-block-batch-actions/./client/src/scripts/BlockBatchActionBar.ts","webpack://craft-block-batch-actions/webpack/bootstrap","webpack://craft-block-batch-actions/webpack/runtime/make namespace object","webpack://craft-block-batch-actions/./client/src/scripts/main.ts"],"sourcesContent":["import { InputBlock, MatrixInputBlock, NeoInputBlock } from './types/InputBlock'\nimport { InputField, NeoInputField } from './types/InputField'\n\n/**\n * Settings for a `BlockBatchActionBar`.\n */\ninterface BlockBatchActionBarSettings {\n  blockClass: string\n  blockSelectedClass: string\n  addBlockEvent: string\n}\n\n/**\n * The event triggered when a new block is added to a block element field.\n */\ninterface AddBlockEvent {\n  $block?: JQuery\n  block: InputBlock\n}\n\n/**\n * The mobile menu button for a `BlockBatchActionBar`.\n */\ninterface MenuButton extends JQuery {\n  menubtn: () => void\n}\n\n/**\n * The data used when refreshing the `BlockBatchActionBar` buttons.\n */\ninterface ButtonRefreshData {\n  icon: string\n  check: Function\n  enable: boolean\n}\n\n/**\n * A bar added to block element input fields for selecting all blocks and performing batch actions.\n */\nabstract class BlockBatchActionBar {\n  /**\n   * The container for the select/buttons/menu components.\n   * @public\n   */\n  public $bar: JQuery\n\n  /**\n   * The container for the select all checkbox.\n   * @public\n   */\n  public $selectContainer: JQuery\n\n  /**\n   * The select all checkbox.\n   * @public\n   */\n  public $select: JQuery\n\n  /**\n   * The container for the action buttons.\n   * @public\n   */\n  public $buttonsContainer: JQuery\n\n  /**\n   * The container for the mobile menu.\n   * @public\n   */\n  public $menuContainer: JQuery\n\n  /**\n   * The mobile menu.\n   * @public\n   */\n  public $menu: JQuery\n\n  /**\n   * The action buttons.\n   * @private\n   */\n  private _$buttons: Record<string, JQuery> = {}\n\n  /**\n   * The constructor.\n   * @param input - The block element `InputField`.\n   * @param settings - A `BlockBatchActionBarSettings` object.\n   * @public\n   */\n  constructor (\n    public readonly input: InputField,\n    public readonly settings: BlockBatchActionBarSettings\n  ) {\n    this.$bar = $('<div class=\"block-batch-action-bar\"/>').prependTo(input.$container)\n    this._initSelect()\n    this._initButtons()\n    this._initMenu()\n\n    const $actions = this.$bar.add(this.$menu)\n\n    this.supportedActions().forEach(([label, _icon, _check]) => {\n      const lowerCaseLabel = label.toLowerCase()\n      this._$buttons[lowerCaseLabel] = $actions.find(`[data-bba-bn=\"button.${lowerCaseLabel}\"]`)\n      this._$buttons[lowerCaseLabel].on('activate', (e: JQuery.Event) => {\n        e.preventDefault()\n        const actionMethod = this[lowerCaseLabel as keyof BlockBatchActionBar]\n\n        if (typeof actionMethod === 'function') {\n          actionMethod.bind(this)()\n          this._refreshButtons()\n        }\n      })\n    })\n\n    this._refreshButtons()\n  }\n\n  /**\n   * Gets the supported batch actions for the block element input field.\n   * @returns an array of tuples containing the label, icon name, and function to check whether the\n   * action should be enabled.\n   * @protected\n   */\n  protected supportedActions (): Array<[string, string, Function]> {\n    return [\n      ['Expand', 'expand', this.isBlockCollapsed.bind(this)],\n      ['Collapse', 'collapse', this.isBlockExpanded.bind(this)],\n      ['Enable', 'enabled', this.isBlockDisabled.bind(this)],\n      ['Disable', 'disabled', this.isBlockEnabled.bind(this)],\n      ['Delete', 'remove', (_: JQuery) => true]\n    ]\n  }\n\n  /**\n   * Checks whether a block is expanded.\n   * @param $block - A `JQuery` object representing an input block\n   * @returns whether `$block` is expanded.\n   * @protected\n   */\n  protected abstract isBlockExpanded ($block: JQuery): boolean\n\n  /**\n   * Checks whether a block is collapsed.\n   * @param $block - A `JQuery` object representing an input block\n   * @returns whether `$block` is collapsed.\n   * @protected\n   */\n  protected isBlockCollapsed ($block: JQuery): boolean {\n    return !this.isBlockExpanded($block)\n  }\n\n  /**\n   * Checks whether a block is enabled.\n   * @param $block - A `JQuery` object representing an input block\n   * @returns whether `$block` is enabled.\n   * @protected\n   */\n  protected abstract isBlockEnabled ($block: JQuery): boolean\n\n  /**\n   * Checks whether a block is disabled.\n   * @param $block - A `JQuery` object representing an input block\n   * @returns whether `$block` is disabled.\n   * @protected\n   */\n  protected isBlockDisabled ($block: JQuery): boolean {\n    return !this.isBlockEnabled($block)\n  }\n\n  /**\n   * Initialises the select all checkbox.\n   * @private\n   */\n  private _initSelect (): void {\n    this.$selectContainer = $('<div/>', {\n      class: 'block-batch-action-bar_select',\n      role: 'checkbox',\n      tabindex: 0,\n      'aria-label': 'Select all',\n      'aria-checked': 'false'\n    }).appendTo(this.$bar)\n    this.$select = $('<div class=\"checkbox\">').appendTo(this.$selectContainer)\n    let handlingCheckbox = false\n    let initialised = false\n\n    const selectHandler: (e: JQuery.Event) => void = (e) => {\n      if (!initialised) {\n        // The add block event is only initialised on the first check of the select checkbox, since\n        // if it isn't checked then any new block doesn't need to be checked\n        this.input.on(this.settings.addBlockEvent, (e: AddBlockEvent) => {\n          const $block = e.$block ?? e.block.$container\n          $block.toggleClass(this.input.blockSelect.settings.selectedClass, this.$select.hasClass('checked'))\n        })\n        initialised = true\n      }\n\n      handlingCheckbox = true\n      this.$select.toggleClass('checked').removeClass('indeterminate')\n      const selectAll = this.$select.hasClass('checked')\n\n      if (selectAll) {\n        this.input.blockSelect.selectAll()\n        this.$selectContainer.attr('aria-checked', 'true')\n      } else {\n        this.input.blockSelect.deselectAll()\n        this.$selectContainer.attr('aria-checked', 'false')\n      }\n    }\n\n    this.$selectContainer.on('mousedown', (e) => {\n      if (e.which === Garnish.PRIMARY_CLICK) {\n        selectHandler(e)\n      }\n    })\n    this.$selectContainer.on('keydown', (e) => {\n      if (e.keyCode === Garnish.SPACE_KEY) {\n        e.preventDefault()\n        selectHandler(e)\n      }\n    })\n\n    this.input.blockSelect.on('selectionChange', (_: Event) => {\n      if (!handlingCheckbox) {\n        // Any manual change to block selection invalidates the select all state\n        this.$select.removeClass('checked')\n\n        const anyBlocksChecked = this.input.blockSelect.$selectedItems.length > 0\n        this.$select.toggleClass('indeterminate', anyBlocksChecked)\n        this.$selectContainer.attr('aria-checked', anyBlocksChecked ? 'mixed' : 'false')\n      } else {\n        // Set our checkbox handling as being complete\n        handlingCheckbox = false\n      }\n\n      this._refreshButtons()\n    })\n  }\n\n  /**\n   * Refreshes the enabled/disabled state of the action buttons, based on the selected block(s).\n   * @private\n   */\n  private _refreshButtons (): void {\n    const actions: Record<string, ButtonRefreshData> = {}\n    const labels: string[] = []\n\n    this.supportedActions().forEach(([label, icon, check]) => {\n      labels.push(label)\n      actions[label] = {\n        icon,\n        check,\n        enable: false\n      }\n    })\n\n    this.input.blockSelect.$selectedItems.each((_: number, block: HTMLElement) => {\n      const $block = $(block)\n      labels.forEach((label) => {\n        actions[label].enable ||= actions[label].check($block)\n      })\n    })\n\n    labels.forEach((label) => {\n      this._$buttons[label.toLowerCase()].toggleClass('disabled', !actions[label].enable)\n    })\n  }\n\n  /**\n   * Initialises the action buttons.\n   * @private\n   */\n  private _initButtons (): void {\n    this.$buttonsContainer = $('<div class=\"btngroup\"/>').appendTo(this.$bar)\n    this.supportedActions()\n      .forEach(([label, icon, _]) => this._generateAction(label, icon, 'btn').appendTo(this.$buttonsContainer))\n  }\n\n  /**\n   * Initialises the mobile menu.\n   * @private\n   */\n  private _initMenu (): void {\n    this.$menuContainer = $('<div class=\"block-batch-action-bar_menu hidden\"/>').appendTo(this.$bar)\n    const $button = $('<button type=\"button\" class=\"btn settings icon menubtn\">Actions</button>')\n      .appendTo(this.$menuContainer) as MenuButton\n    this.$menu = $('<div class=\"menu\"/>')\n      .appendTo(this.$menuContainer)\n    const $ul = $('<ul class=\"padded\"/>')\n      .appendTo(this.$menu)\n\n    this.supportedActions()\n      .forEach(([label, icon]) => $('<li/>').append(this._generateAction(label, icon)).appendTo($ul))\n\n    $button.menubtn()\n    let buttonsWidth = this.$buttonsContainer.width() ?? 0\n    this.$bar.on('resize', () => {\n      buttonsWidth ||= this.$buttonsContainer.width() ?? 0\n      const isMobile = (this.$bar.width() ?? 0) < buttonsWidth\n      this.$buttonsContainer.toggleClass('hidden', isMobile)\n      this.$menuContainer.toggleClass('hidden', !isMobile)\n    })\n  }\n\n  /**\n   * Generates an action button.\n   * @param label - the label to use on the button\n   * @param icon - the name of the icon to show on the button\n   * @param buttonClasses - the classes to use on the button element\n   * @returns a `JQuery` object representing the button\n   * @private\n   */\n  private _generateAction (label: string, icon: string|null, buttonClasses?: string): JQuery {\n    const isButton = typeof buttonClasses !== 'undefined'\n    const lowerCaseLabel = label.toLowerCase()\n    icon ??= lowerCaseLabel\n    const $action = $(`<${isButton ? 'button' : 'a'}/>`)\n      .attr({\n        'aria-label': label,\n        'data-bba-bn': `button.${lowerCaseLabel}`,\n        'data-icon': icon\n      })\n      .text(label)\n\n    if (isButton) {\n      $action.addClass(buttonClasses)\n    }\n\n    return $action\n  }\n\n  /**\n   * @returns the selected `InputBlock`s on the block element field\n   * @protected\n   */\n  protected abstract getSelectedBlocks (): InputBlock[]\n\n  /**\n   * Expands the selected blocks.\n   * @public\n   */\n  public expand (): void {\n    this.getSelectedBlocks().forEach((block) => block.expand())\n  }\n\n  /**\n   * Collapses the selected blocks.\n   * @protected\n   */\n  protected collapse (): void {\n    this.getSelectedBlocks().forEach((block) => block.collapse())\n  }\n\n  /**\n   * Enables the selected blocks.\n   * @protected\n   */\n  protected abstract enable (): void\n\n  /**\n   * Disables the selected blocks.\n   * @protected\n   */\n  protected abstract disable (): void\n\n  /**\n   * Deletes the selected blocks.\n   * @protected\n   */\n  protected abstract delete (): void\n}\n\n/**\n * A bar added to Matrix input fields for selecting all blocks and performing batch actions.\n */\nclass MatrixBatchActionBar extends BlockBatchActionBar {\n  /**\n   * The constructor.\n   * @param input - The Matrix `InputField`.\n   * @public\n   */\n  constructor (public readonly input: InputField) {\n    super(input, {\n      blockClass: 'matrixblock',\n      blockSelectedClass: 'sel',\n      addBlockEvent: 'blockAdded'\n    })\n  }\n\n  /**\n   * @inheritDoc\n   */\n  protected isBlockExpanded ($block: JQuery): boolean {\n    return !$block.hasClass('collapsed')\n  }\n\n  /**\n   * @inheritDoc\n   */\n  protected isBlockEnabled ($block: JQuery): boolean {\n    return !$block.hasClass('disabled')\n  }\n\n  /**\n   * @inheritDoc\n   */\n  protected getSelectedBlocks (): MatrixInputBlock[] {\n    return this.input.$container\n      .find(`.${this.settings.blockClass}.${this.settings.blockSelectedClass}`)\n      .map((_, blockEl) => $(blockEl).data('block'))\n      .get()\n  }\n\n  /**\n   * @inheritDoc\n   */\n  protected enable (): void {\n    this.getSelectedBlocks().forEach((block) => block.enable())\n  }\n\n  /**\n   * @inheritDoc\n   */\n  protected disable (): void {\n    this.getSelectedBlocks().forEach((block) => block.disable())\n  }\n\n  /**\n   * @inheritDoc\n   */\n  protected delete (): void {\n    if (window.confirm('Are you sure you want to delete the selected blocks?')) {\n      this.getSelectedBlocks().forEach((block) => block.selfDestruct())\n    }\n  }\n}\n\n/**\n * A bar added to Neo input fields for selecting all blocks and performing batch actions.\n */\nclass NeoBatchActionBar extends BlockBatchActionBar {\n  /**\n   * The constructor.\n   * @param input - The `NeoInputField`.\n   * @public\n   */\n  constructor (public readonly input: NeoInputField) {\n    super(input, {\n      blockClass: 'ni_block',\n      blockSelectedClass: 'is-selected',\n      addBlockEvent: 'addBlock'\n    })\n  }\n\n  /**\n   * @inheritDoc\n   */\n  protected isBlockExpanded ($block: JQuery): boolean {\n    return $block.hasClass('is-expanded')\n  }\n\n  /**\n   * @inheritDoc\n   */\n  protected isBlockEnabled ($block: JQuery): boolean {\n    return $block.hasClass('is-enabled')\n  }\n\n  /**\n   * @inheritDoc\n   */\n  protected getSelectedBlocks (): NeoInputBlock[] {\n    return this.input.getBlocks().filter((block) => block.isSelected())\n  }\n\n  /**\n   * @inheritDoc\n   */\n  protected enable (): void {\n    this.getSelectedBlocks().find((block) => !block.isEnabled())?.enable()\n  }\n\n  /**\n   * @inheritDoc\n   */\n  protected disable (): void {\n    this.getSelectedBlocks().find((block) => block.isEnabled())?.disable()\n  }\n\n  /**\n   * @inheritDoc\n   */\n  protected delete (): void {\n    if (window.confirm('Are you sure you want to delete the selected blocks?')) {\n      this.getSelectedBlocks().forEach((block) => this.input.removeBlock(block))\n    }\n  }\n}\n\nexport { MatrixBatchActionBar, NeoBatchActionBar }\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import { MatrixBatchActionBar, NeoBatchActionBar } from './BlockBatchActionBar'\nimport { InputField, NeoInputField } from './types/InputField'\nimport '../styles/main.scss'\n\ninterface MatrixAfterInitEvent {\n  target: InputField\n}\n\ninterface NeoAfterInitEvent {\n  target: NeoInputField\n}\n\nconst actionBars = []\n\nif (typeof Craft.MatrixInput !== 'undefined') {\n  Garnish.on(Craft.MatrixInput, 'afterInit', (e: MatrixAfterInitEvent) => {\n    actionBars.push(new MatrixBatchActionBar(e.target))\n  })\n}\n\nif (typeof Neo !== 'undefined' && typeof Neo.Input !== 'undefined') {\n  Garnish.on(Neo.Input, 'afterInit', (e: NeoAfterInitEvent) => {\n    // Neo's block select was private prior to Neo 3.3.4\n    // TODO: remove this check on Craft 5\n    if (typeof e.target.blockSelect !== 'undefined') {\n      actionBars.push(new NeoBatchActionBar(e.target))\n    }\n  })\n}\n"],"names":["BlockBatchActionBar","constructor","input","settings","_$buttons","this","$bar","$","prependTo","$container","_initSelect","_initButtons","_initMenu","$actions","add","$menu","supportedActions","forEach","label","_icon","_check","lowerCaseLabel","toLowerCase","find","on","e","preventDefault","actionMethod","bind","_refreshButtons","isBlockCollapsed","isBlockExpanded","isBlockDisabled","isBlockEnabled","_","$block","$selectContainer","class","role","tabindex","appendTo","$select","handlingCheckbox","initialised","selectHandler","addBlockEvent","block","toggleClass","blockSelect","selectedClass","hasClass","removeClass","selectAll","attr","deselectAll","which","Garnish","PRIMARY_CLICK","keyCode","SPACE_KEY","anyBlocksChecked","$selectedItems","length","actions","labels","icon","check","push","enable","each","$buttonsContainer","_generateAction","$menuContainer","$button","$ul","append","menubtn","buttonsWidth","width","isMobile","buttonClasses","isButton","$action","text","addClass","expand","getSelectedBlocks","collapse","MatrixBatchActionBar","super","blockClass","blockSelectedClass","map","blockEl","data","get","disable","delete","window","confirm","selfDestruct","NeoBatchActionBar","getBlocks","filter","isSelected","isEnabled","removeBlock","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","exports","module","__webpack_modules__","r","Symbol","toStringTag","Object","defineProperty","value","actionBars","Craft","MatrixInput","target","Neo","Input"],"sourceRoot":""}