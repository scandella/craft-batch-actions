{"version":3,"file":"bars/dist/js/bars.js","mappings":"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","sources":["webpack://craft-batch-actions/./client/src/scripts/BatchActionBar.ts","webpack://craft-batch-actions/webpack/bootstrap","webpack://craft-batch-actions/webpack/runtime/make namespace object","webpack://craft-batch-actions/./client/src/scripts/main.ts"],"sourcesContent":["import { InputBlock, MatrixInputBlock, NeoInputBlock } from './types/InputBlock'\nimport { InputField, NeoInputField } from './types/InputField'\n\n/**\n * Settings for a `BatchActionBar`.\n */\ninterface BatchActionBarSettings {\n  addBlockEvent: string\n}\n\n/**\n * The event triggered when a new block is added to a block element field.\n */\ninterface AddBlockEvent {\n  $block?: JQuery\n  block: NeoInputBlock\n}\n\n/**\n * The mobile menu button for a `BatchActionBar`.\n */\ninterface MenuButton extends JQuery {\n  menubtn: () => void\n}\n\n/**\n * The data used when refreshing the `BatchActionBar` buttons.\n */\ninterface ButtonRefreshData {\n  icon: string\n  check: Function\n  enable: boolean\n}\n\n/**\n * A bar added to block element input fields for selecting all blocks and performing batch actions.\n */\nabstract class BatchActionBar {\n  /**\n   * The container for the select/buttons/menu components.\n   * @public\n   */\n  public $bar: JQuery\n\n  /**\n   * The container for the select all checkbox.\n   * @public\n   */\n  public $selectContainer: JQuery\n\n  /**\n   * The select all checkbox.\n   * @public\n   */\n  public $select: JQuery\n\n  /**\n   * The container for the action buttons.\n   * @public\n   */\n  public $buttonsContainer: JQuery\n\n  /**\n   * The container for the mobile menu.\n   * @public\n   */\n  public $menuContainer: JQuery\n\n  /**\n   * The mobile menu.\n   * @public\n   */\n  public $menu: JQuery\n\n  /**\n   * The action buttons.\n   * @private\n   */\n  private _$buttons: Record<string, JQuery> = {}\n\n  /**\n   * The constructor.\n   * @param input - The block element `InputField`.\n   * @param settings - A `BatchActionBarSettings` object.\n   * @public\n   */\n  constructor (\n    public readonly input: InputField,\n    public readonly settings: BatchActionBarSettings\n  ) {\n    this.$bar = $('<div class=\"batch-action-bar\"/>').prependTo(input.$container)\n    this._initSelect()\n    this._initButtons()\n    this._initMenu()\n\n    const $actions = this.$bar.add(this.$menu)\n\n    // Register event handlers for each action button\n    this.supportedActions().forEach(([label, _icon, _check]) => {\n      const lowerCaseLabel = label.toLowerCase()\n      this._$buttons[lowerCaseLabel] = $actions.find(`[data-bba-bn=\"button.${lowerCaseLabel}\"]`)\n      this._$buttons[lowerCaseLabel].on('activate', (e: JQuery.Event) => {\n        e.preventDefault()\n        const actionMethod = this[lowerCaseLabel as keyof BatchActionBar]\n\n        if (typeof actionMethod === 'function') {\n          actionMethod.bind(this)()\n          this.refreshButtons()\n        }\n      })\n    })\n\n    this.refreshButtons()\n    this.registerEventListeners()\n  }\n\n  /**\n   * Gets the supported batch actions for the block element input field.\n   * @returns an array of tuples containing the label, icon name, and function to check whether the\n   * action should be enabled.\n   * @protected\n   */\n  protected supportedActions (): Array<[string, string, Function]> {\n    return [\n      ['Expand', 'expand', this.isBlockCollapsed.bind(this)],\n      ['Collapse', 'collapse', this.isBlockExpanded.bind(this)],\n      ['Enable', 'enabled', this.isBlockDisabled.bind(this)],\n      ['Disable', 'disabled', this.isBlockEnabled.bind(this)],\n      ['Delete', 'remove', (_: JQuery) => true]\n    ]\n  }\n\n  /**\n   * Checks whether a block is expanded.\n   * @param $block - A `JQuery` object representing an input block\n   * @returns whether `$block` is expanded.\n   * @protected\n   */\n  protected abstract isBlockExpanded ($block: JQuery): boolean\n\n  /**\n   * Checks whether a block is collapsed.\n   * @param $block - A `JQuery` object representing an input block\n   * @returns whether `$block` is collapsed.\n   * @protected\n   */\n  protected isBlockCollapsed ($block: JQuery): boolean {\n    return !this.isBlockExpanded($block)\n  }\n\n  /**\n   * Checks whether a block is enabled.\n   * @param $block - A `JQuery` object representing an input block\n   * @returns whether `$block` is enabled.\n   * @protected\n   */\n  protected abstract isBlockEnabled ($block: JQuery): boolean\n\n  /**\n   * Checks whether a block is disabled.\n   * @param $block - A `JQuery` object representing an input block\n   * @returns whether `$block` is disabled.\n   * @protected\n   */\n  protected isBlockDisabled ($block: JQuery): boolean {\n    return !this.isBlockEnabled($block)\n  }\n\n  /**\n   * Initialises the select all checkbox.\n   * @private\n   */\n  private _initSelect (): void {\n    this.$selectContainer = $('<div/>', {\n      class: 'batch-action-bar_select',\n      role: 'checkbox',\n      tabindex: 0,\n      'aria-label': Craft.t('batch-actions', 'Select all'),\n      'aria-checked': 'false'\n    }).appendTo(this.$bar)\n    this.$select = $('<div class=\"checkbox\">').appendTo(this.$selectContainer)\n    let handlingCheckbox = false\n    let initialised = false\n\n    const selectHandler: (e: JQuery.Event) => void = (e) => {\n      if (!initialised) {\n        // The add block event is only initialised on the first check of the select checkbox, since\n        // if it isn't checked then any new block doesn't need to be checked\n        this.input.on(this.settings.addBlockEvent, (e: AddBlockEvent) => {\n          const $block = e.$block ?? e.block.$container\n\n          if (this.$select.hasClass('checked')) {\n            handlingCheckbox = true\n            $block.addClass(this.input.blockSelect.settings.selectedClass)\n            this.input.blockSelect.selectItem($block, false, true)\n            this.refreshButtons()\n          }\n        })\n        initialised = true\n      }\n\n      handlingCheckbox = true\n      this.$select.toggleClass('checked').removeClass('indeterminate')\n      const selectAll = this.$select.hasClass('checked')\n\n      if (selectAll) {\n        this.input.blockSelect.selectAll()\n        this.$selectContainer.attr('aria-checked', 'true')\n      } else {\n        this.input.blockSelect.deselectAll()\n        this.$selectContainer.attr('aria-checked', 'false')\n      }\n    }\n\n    this.$selectContainer.on('mousedown', (e) => {\n      if (e.which === Garnish.PRIMARY_CLICK) {\n        selectHandler(e)\n      }\n    })\n    this.$selectContainer.on('keydown', (e) => {\n      if (e.keyCode === Garnish.SPACE_KEY) {\n        e.preventDefault()\n        selectHandler(e)\n      }\n    })\n\n    this.input.blockSelect.on('selectionChange', (_: Event) => {\n      if (!handlingCheckbox) {\n        // Any manual change to block selection invalidates the select all state\n        this.$select.removeClass('checked')\n\n        const anyBlocksChecked = this.input.blockSelect.$selectedItems.length > 0\n        this.$select.toggleClass('indeterminate', anyBlocksChecked)\n        this.$selectContainer.attr('aria-checked', anyBlocksChecked ? 'mixed' : 'false')\n      } else {\n        // Set our checkbox handling as being complete\n        handlingCheckbox = false\n      }\n\n      this.refreshButtons()\n    })\n  }\n\n  /**\n   * Refreshes the enabled/disabled state of the action buttons, based on the selected block(s).\n   * @protected\n   */\n  protected refreshButtons (): void {\n    const actions: Record<string, ButtonRefreshData> = {}\n    const labels: string[] = []\n\n    this.supportedActions().forEach(([label, icon, check]) => {\n      labels.push(label)\n      actions[label] = {\n        icon,\n        check,\n        enable: false\n      }\n    })\n\n    this.input.blockSelect.$selectedItems.each((_: number, block: HTMLElement) => {\n      const $block = $(block)\n      labels.forEach((label) => {\n        actions[label].enable ||= actions[label].check($block)\n      })\n    })\n\n    labels.forEach((label) => {\n      this._$buttons[label.toLowerCase()].toggleClass('disabled', !actions[label].enable)\n    })\n  }\n\n  /**\n   * Registers listeners for events where `BatchActionBar` actions should be executed.\n   * @protected\n   */\n  protected registerEventListeners (): void {}\n\n  /**\n   * Initialises the action buttons.\n   * @private\n   */\n  private _initButtons (): void {\n    this.$buttonsContainer = $('<div class=\"batch-action-bar_buttons btngroup\"/>').appendTo(this.$bar)\n    this.supportedActions()\n      .forEach(([label, icon, _]) => this._generateAction(label, icon, 'btn').appendTo(this.$buttonsContainer))\n  }\n\n  /**\n   * Initialises the mobile menu.\n   * @private\n   */\n  private _initMenu (): void {\n    this.$menuContainer = $('<div class=\"batch-action-bar_menu hidden\"/>').appendTo(this.$bar)\n    const $button = $('<button type=\"button\" class=\"btn settings icon menubtn\">Actions</button>')\n      .appendTo(this.$menuContainer) as MenuButton\n    this.$menu = $('<div class=\"menu\"/>')\n      .appendTo(this.$menuContainer)\n    const $ul = $('<ul class=\"padded\"/>')\n      .appendTo(this.$menu)\n\n    this.supportedActions()\n      .forEach(([label, icon]) => $('<li/>').append(this._generateAction(label, icon)).appendTo($ul))\n\n    $button.menubtn()\n    const selectWidth = (this.$selectContainer.outerWidth() as number) + 2\n    let buttonsWidth = this.$buttonsContainer.width() as number\n    this.$bar.on('resize', () => {\n      buttonsWidth ||= this.$buttonsContainer.width() as number\n      const isMobile = (this.$bar.width() as number) - selectWidth < buttonsWidth\n      this.$buttonsContainer.toggleClass('hidden', isMobile)\n      this.$menuContainer.toggleClass('hidden', !isMobile)\n    })\n  }\n\n  /**\n   * Generates an action button.\n   * @param label - the label to use on the button\n   * @param icon - the name of the icon to show on the button\n   * @param buttonClasses - the classes to use on the button element\n   * @returns a `JQuery` object representing the button\n   * @private\n   */\n  private _generateAction (label: string, icon: string|null, buttonClasses?: string): JQuery {\n    const isButton = typeof buttonClasses !== 'undefined'\n    const lowerCaseLabel = label.toLowerCase()\n    icon ??= lowerCaseLabel\n    const $action = $(`<${isButton ? 'button' : 'a'}/>`)\n      .attr({\n        'aria-label': label,\n        'data-bba-bn': `button.${lowerCaseLabel}`,\n        'data-icon': icon\n      })\n      .text(Craft.t('batch-actions', label))\n\n    if (isButton) {\n      $action.addClass(buttonClasses)\n    }\n\n    return $action\n  }\n\n  /**\n   * @returns the selected `InputBlock`s on the block element field\n   * @protected\n   */\n  protected abstract getSelectedBlocks (): InputBlock[]\n\n  /**\n   * Expands the selected blocks.\n   * @public\n   */\n  public expand (): void {\n    this.getSelectedBlocks().forEach((block) => block.expand())\n  }\n\n  /**\n   * Collapses the selected blocks.\n   * @protected\n   */\n  protected collapse (): void {\n    this.getSelectedBlocks().forEach((block) => block.collapse())\n  }\n\n  /**\n   * Enables the selected blocks.\n   * @protected\n   */\n  protected abstract enable (): void\n\n  /**\n   * Disables the selected blocks.\n   * @protected\n   */\n  protected abstract disable (): void\n\n  /**\n   * Deletes the selected blocks.\n   * @protected\n   */\n  protected abstract delete (): void\n}\n\n/**\n * A bar added to Matrix input fields for selecting all blocks and performing batch actions.\n */\nclass MatrixBatchActionBar extends BatchActionBar {\n  /**\n   * The constructor.\n   * @param input - The Matrix `InputField`.\n   * @public\n   */\n  constructor (public readonly input: InputField) {\n    super(input, {\n      addBlockEvent: 'blockAdded'\n    })\n  }\n\n  /**\n   * @inheritDoc\n   */\n  protected registerEventListeners (): void {\n    const settingsMenuListener: (block: MatrixInputBlock) => void = (block) => {\n      block.actionDisclosure.on('hide', () => this.refreshButtons())\n    }\n    this.input.blockSelect.$items.each((_, block: HTMLElement) => settingsMenuListener($(block).data('block')))\n    this.input.on(this.settings.addBlockEvent, (e: AddBlockEvent) => {\n      // Craft triggers the `blockAdded` event after attaching the HTML element to the DOM, but\n      // before actually creating the `MatrixBlock` instance\n      setTimeout(() => settingsMenuListener(e.$block?.data('block')), 250)\n    })\n  }\n\n  /**\n   * @inheritDoc\n   */\n  protected isBlockExpanded ($block: JQuery): boolean {\n    return !$block.hasClass('collapsed')\n  }\n\n  /**\n   * @inheritDoc\n   */\n  protected isBlockEnabled ($block: JQuery): boolean {\n    return !$block.hasClass('disabled')\n  }\n\n  /**\n   * @inheritDoc\n   */\n  protected getSelectedBlocks (): MatrixInputBlock[] {\n    return this.input.blockSelect.$selectedItems\n      .map((_, blockEl) => $(blockEl).data('block'))\n      .get()\n  }\n\n  /**\n   * @inheritDoc\n   */\n  protected enable (): void {\n    this.getSelectedBlocks().forEach((block) => block.enable())\n  }\n\n  /**\n   * @inheritDoc\n   */\n  protected disable (): void {\n    this.getSelectedBlocks().forEach((block) => block.disable())\n  }\n\n  /**\n   * @inheritDoc\n   */\n  protected delete (): void {\n    if (window.confirm(Craft.t('batch-actions', 'Are you sure you want to delete the selected blocks?'))) {\n      this.getSelectedBlocks().forEach((block) => block.selfDestruct())\n    }\n  }\n}\n\n/**\n * A bar added to Neo input fields for selecting all blocks and performing batch actions.\n */\nclass NeoBatchActionBar extends BatchActionBar {\n  /**\n   * The constructor.\n   * @param input - The `NeoInputField`.\n   * @public\n   */\n  constructor (public readonly input: NeoInputField) {\n    super(input, {\n      addBlockEvent: 'addBlock'\n    })\n  }\n\n  /**\n   * @inheritDoc\n   */\n  protected registerEventListeners (): void {\n    const blockEventListener: (block: NeoInputBlock) => void = (block) => {\n      block.on('toggleExpansion toggleEnabled', () => this.refreshButtons())\n    }\n    this.input.getBlocks().forEach(blockEventListener)\n    this.input.on(this.settings.addBlockEvent, (e: AddBlockEvent) => blockEventListener(e.block))\n    this.input.on('removeBlock', () => this.refreshButtons())\n  }\n\n  /**\n   * @inheritDoc\n   */\n  protected isBlockExpanded ($block: JQuery): boolean {\n    return $block.hasClass('is-expanded')\n  }\n\n  /**\n   * @inheritDoc\n   */\n  protected isBlockEnabled ($block: JQuery): boolean {\n    return $block.hasClass('is-enabled')\n  }\n\n  /**\n   * @inheritDoc\n   */\n  protected getSelectedBlocks (): NeoInputBlock[] {\n    return this.input.getBlocks().filter((block) => block.isSelected())\n  }\n\n  /**\n   * @inheritDoc\n   */\n  protected enable (): void {\n    this.getSelectedBlocks().find((block) => !block.isEnabled())?.enable()\n  }\n\n  /**\n   * @inheritDoc\n   */\n  protected disable (): void {\n    this.getSelectedBlocks().find((block) => block.isEnabled())?.disable()\n  }\n\n  /**\n   * @inheritDoc\n   */\n  protected delete (): void {\n    if (window.confirm(Craft.t('batch-actions', 'Are you sure you want to delete the selected blocks?'))) {\n      this.getSelectedBlocks().forEach((block) => this.input.removeBlock(block))\n    }\n  }\n}\n\nexport { MatrixBatchActionBar, NeoBatchActionBar }\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import { MatrixBatchActionBar, NeoBatchActionBar } from './BatchActionBar'\nimport { InputField, NeoInputField } from './types/InputField'\nimport '../styles/main.scss'\n\ninterface MatrixAfterInitEvent {\n  target: InputField\n}\n\ninterface NeoAfterInitEvent {\n  target: NeoInputField\n}\n\nconst actionBars = []\n\n// Only listen for Matrix input initialisation if there are actually any Matrix fields\nif (typeof Craft.MatrixInput !== 'undefined') {\n  Garnish.on(Craft.MatrixInput, 'afterInit', (e: MatrixAfterInitEvent) => {\n    actionBars.push(new MatrixBatchActionBar(e.target))\n  })\n}\n\n// Only listen for Neo input initialisation if Neo is installed, and there are any Neo fields\nif (typeof Neo !== 'undefined' && typeof Neo.Input !== 'undefined') {\n  Garnish.on(Neo.Input, 'afterInit', (e: NeoAfterInitEvent) => {\n    // Neo's block select was private prior to Neo 3.3.4\n    // TODO: remove this check on Craft 5\n    if (typeof e.target.blockSelect !== 'undefined') {\n      actionBars.push(new NeoBatchActionBar(e.target))\n    }\n  })\n}\n"],"names":["BatchActionBar","constructor","input","settings","_$buttons","this","$bar","$","prependTo","$container","_initSelect","_initButtons","_initMenu","$actions","add","$menu","supportedActions","forEach","label","_icon","_check","lowerCaseLabel","toLowerCase","find","on","e","preventDefault","actionMethod","bind","refreshButtons","registerEventListeners","isBlockCollapsed","isBlockExpanded","isBlockDisabled","isBlockEnabled","_","$block","$selectContainer","class","role","tabindex","Craft","t","appendTo","$select","handlingCheckbox","initialised","selectHandler","addBlockEvent","block","hasClass","addClass","blockSelect","selectedClass","selectItem","toggleClass","removeClass","selectAll","attr","deselectAll","which","Garnish","PRIMARY_CLICK","keyCode","SPACE_KEY","anyBlocksChecked","$selectedItems","length","actions","labels","icon","check","push","enable","each","$buttonsContainer","_generateAction","$menuContainer","$button","$ul","append","menubtn","selectWidth","outerWidth","buttonsWidth","width","isMobile","buttonClasses","isButton","$action","text","expand","getSelectedBlocks","collapse","MatrixBatchActionBar","super","settingsMenuListener","actionDisclosure","$items","data","setTimeout","map","blockEl","get","disable","delete","window","confirm","selfDestruct","NeoBatchActionBar","blockEventListener","getBlocks","filter","isSelected","isEnabled","removeBlock","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","exports","module","__webpack_modules__","r","Symbol","toStringTag","Object","defineProperty","value","actionBars","MatrixInput","target","Neo","Input"],"sourceRoot":""}